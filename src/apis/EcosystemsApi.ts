/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApproveEcosystemGameRequest,
  AuthPlayer200Response,
  AuthProfile200Response,
  CreateEcosystemRequest,
  CreateProfilePlayerRequest,
  CreateProfileRequest,
  EcosystemModel,
  GetProfileGames200ResponseInner,
  ProfileModel,
  PublicEcosystem,
  PublicGame,
  UpdateEcosystemRequest,
  UpdateProfilePlayer200Response,
  UpdateProfilePlayerRequest,
  UpdateProfileRequest,
} from '../models';
import {
    ApproveEcosystemGameRequestFromJSON,
    ApproveEcosystemGameRequestToJSON,
    AuthPlayer200ResponseFromJSON,
    AuthPlayer200ResponseToJSON,
    AuthProfile200ResponseFromJSON,
    AuthProfile200ResponseToJSON,
    CreateEcosystemRequestFromJSON,
    CreateEcosystemRequestToJSON,
    CreateProfilePlayerRequestFromJSON,
    CreateProfilePlayerRequestToJSON,
    CreateProfileRequestFromJSON,
    CreateProfileRequestToJSON,
    EcosystemModelFromJSON,
    EcosystemModelToJSON,
    GetProfileGames200ResponseInnerFromJSON,
    GetProfileGames200ResponseInnerToJSON,
    ProfileModelFromJSON,
    ProfileModelToJSON,
    PublicEcosystemFromJSON,
    PublicEcosystemToJSON,
    PublicGameFromJSON,
    PublicGameToJSON,
    UpdateEcosystemRequestFromJSON,
    UpdateEcosystemRequestToJSON,
    UpdateProfilePlayer200ResponseFromJSON,
    UpdateProfilePlayer200ResponseToJSON,
    UpdateProfilePlayerRequestFromJSON,
    UpdateProfilePlayerRequestToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
} from '../models';

export interface ApproveEcosystemGameOperationRequest {
    ecosystemId: string;
    xAuthorization: string;
    approveEcosystemGameRequest: ApproveEcosystemGameRequest;
}

export interface AuthProfileRequest {
    xEcosystemKey: string;
}

export interface AuthProfilePlayerRequest {
    profileId: string;
    gameId: string;
    xAuthorization: string;
    xWalletDecryptKey: string;
    xUsername: string;
}

export interface CreateEcosystemOperationRequest {
    createEcosystemRequest: CreateEcosystemRequest;
}

export interface CreateProfileOperationRequest {
    xEcosystemKey: string;
    createProfileRequest: CreateProfileRequest;
}

export interface CreateProfilePlayerOperationRequest {
    profileId: string;
    gameId: string;
    xAuthorization: string;
    xWalletDecryptKey: string;
    createProfilePlayerRequest: CreateProfilePlayerRequest;
}

export interface GetEcosystemRequest {
    ecosystemId: string;
}

export interface GetEcosystemGameRequest {
    ecosystemId: string;
    gameId: string;
}

export interface GetEcosystemGamesRequest {
    ecosystemId: string;
}

export interface GetProfileGameRequest {
    profileId: string;
    gameId: string;
    xAuthorization: string;
}

export interface GetProfileGamesRequest {
    profileId: string;
    xAuthorization: string;
}

export interface UnapproveEcosystemGameRequest {
    ecosystemId: string;
    gameId: string;
    xAuthorization: string;
}

export interface UpdateEcosystemOperationRequest {
    ecosystemId: string;
    xAuthorization: string;
    updateEcosystemRequest: UpdateEcosystemRequest;
}

export interface UpdateProfileOperationRequest {
    profileId: string;
    xAuthorization: string;
    updateProfileRequest: UpdateProfileRequest;
}

export interface UpdateProfilePlayerOperationRequest {
    profileId: string;
    gameId: string;
    playerId: string;
    xAuthorization: string;
    xWalletDecryptKey: string;
    updateProfilePlayerRequest: UpdateProfilePlayerRequest;
}

/**
 * 
 */
export class EcosystemsApi extends runtime.BaseAPI {

    /**
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * Approve ecosystem game
     */
    async approveEcosystemGameRaw(requestParameters: ApproveEcosystemGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling approveEcosystemGame.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling approveEcosystemGame.');
        }

        if (requestParameters.approveEcosystemGameRequest === null || requestParameters.approveEcosystemGameRequest === undefined) {
            throw new runtime.RequiredError('approveEcosystemGameRequest','Required parameter requestParameters.approveEcosystemGameRequest was null or undefined when calling approveEcosystemGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}/games`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveEcosystemGameRequestToJSON(requestParameters.approveEcosystemGameRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     * Approve ecosystem game
     */
    async approveEcosystemGame(requestParameters: ApproveEcosystemGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveEcosystemGameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * Authenticate ecosystem
     */
    async authEcosystemRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EcosystemModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/ecosystems/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EcosystemModelFromJSON(jsonValue));
    }

    /**
     * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     * Authenticate ecosystem
     */
    async authEcosystem(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EcosystemModel> {
        const response = await this.authEcosystemRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * Authenticate profile
     */
    async authProfileRaw(requestParameters: AuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthProfile200Response>> {
        if (requestParameters.xEcosystemKey === null || requestParameters.xEcosystemKey === undefined) {
            throw new runtime.RequiredError('xEcosystemKey','Required parameter requestParameters.xEcosystemKey was null or undefined when calling authProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xEcosystemKey !== undefined && requestParameters.xEcosystemKey !== null) {
            headerParameters['X-Ecosystem-Key'] = String(requestParameters.xEcosystemKey);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/profiles/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     * Authenticate profile
     */
    async authProfile(requestParameters: AuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthProfile200Response> {
        const response = await this.authProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player\'s username.
     * Authenticate profile player
     */
    async authProfilePlayerRaw(requestParameters: AuthProfilePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthPlayer200Response>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling authProfilePlayer.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling authProfilePlayer.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling authProfilePlayer.');
        }

        if (requestParameters.xWalletDecryptKey === null || requestParameters.xWalletDecryptKey === undefined) {
            throw new runtime.RequiredError('xWalletDecryptKey','Required parameter requestParameters.xWalletDecryptKey was null or undefined when calling authProfilePlayer.');
        }

        if (requestParameters.xUsername === null || requestParameters.xUsername === undefined) {
            throw new runtime.RequiredError('xUsername','Required parameter requestParameters.xUsername was null or undefined when calling authProfilePlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        if (requestParameters.xWalletDecryptKey !== undefined && requestParameters.xWalletDecryptKey !== null) {
            headerParameters['X-Wallet-Decrypt-Key'] = String(requestParameters.xWalletDecryptKey);
        }

        if (requestParameters.xUsername !== undefined && requestParameters.xUsername !== null) {
            headerParameters['X-Username'] = String(requestParameters.xUsername);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/games/{gameId}/players/auth`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthPlayer200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player\'s username.
     * Authenticate profile player
     */
    async authProfilePlayer(requestParameters: AuthProfilePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthPlayer200Response> {
        const response = await this.authProfilePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * Create ecosystem
     */
    async createEcosystemRaw(requestParameters: CreateEcosystemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EcosystemModel>> {
        if (requestParameters.createEcosystemRequest === null || requestParameters.createEcosystemRequest === undefined) {
            throw new runtime.RequiredError('createEcosystemRequest','Required parameter requestParameters.createEcosystemRequest was null or undefined when calling createEcosystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/ecosystems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEcosystemRequestToJSON(requestParameters.createEcosystemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EcosystemModelFromJSON(jsonValue));
    }

    /**
     * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     * Create ecosystem
     */
    async createEcosystem(requestParameters: CreateEcosystemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EcosystemModel> {
        const response = await this.createEcosystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * Create profile
     */
    async createProfileRaw(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthProfile200Response>> {
        if (requestParameters.xEcosystemKey === null || requestParameters.xEcosystemKey === undefined) {
            throw new runtime.RequiredError('xEcosystemKey','Required parameter requestParameters.xEcosystemKey was null or undefined when calling createProfile.');
        }

        if (requestParameters.createProfileRequest === null || requestParameters.createProfileRequest === undefined) {
            throw new runtime.RequiredError('createProfileRequest','Required parameter requestParameters.createProfileRequest was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xEcosystemKey !== undefined && requestParameters.xEcosystemKey !== null) {
            headerParameters['X-Ecosystem-Key'] = String(requestParameters.xEcosystemKey);
        }

        const response = await this.request({
            path: `/v1/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileRequestToJSON(requestParameters.createProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     * Create profile
     */
    async createProfile(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthProfile200Response> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile\'s wallet for any transactions, wallet content balance checks and verifications, and more.
     * Create profile player
     */
    async createProfilePlayerRaw(requestParameters: CreateProfilePlayerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthPlayer200Response>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling createProfilePlayer.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling createProfilePlayer.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling createProfilePlayer.');
        }

        if (requestParameters.xWalletDecryptKey === null || requestParameters.xWalletDecryptKey === undefined) {
            throw new runtime.RequiredError('xWalletDecryptKey','Required parameter requestParameters.xWalletDecryptKey was null or undefined when calling createProfilePlayer.');
        }

        if (requestParameters.createProfilePlayerRequest === null || requestParameters.createProfilePlayerRequest === undefined) {
            throw new runtime.RequiredError('createProfilePlayerRequest','Required parameter requestParameters.createProfilePlayerRequest was null or undefined when calling createProfilePlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        if (requestParameters.xWalletDecryptKey !== undefined && requestParameters.xWalletDecryptKey !== null) {
            headerParameters['X-Wallet-Decrypt-Key'] = String(requestParameters.xWalletDecryptKey);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/games/{gameId}/players`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfilePlayerRequestToJSON(requestParameters.createProfilePlayerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthPlayer200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile\'s wallet for any transactions, wallet content balance checks and verifications, and more.
     * Create profile player
     */
    async createProfilePlayer(requestParameters: CreateProfilePlayerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthPlayer200Response> {
        const response = await this.createProfilePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a ecosystem object for the provided ecosystem id.
     * Get ecosystem
     */
    async getEcosystemRaw(requestParameters: GetEcosystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicEcosystem>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling getEcosystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicEcosystemFromJSON(jsonValue));
    }

    /**
     * Returns a ecosystem object for the provided ecosystem id.
     * Get ecosystem
     */
    async getEcosystem(requestParameters: GetEcosystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicEcosystem> {
        const response = await this.getEcosystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a game object for the provided game id that the ecosystem has approved.
     * Get ecosystem game
     */
    async getEcosystemGameRaw(requestParameters: GetEcosystemGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicGame>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling getEcosystemGame.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getEcosystemGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}/games/{gameId}`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicGameFromJSON(jsonValue));
    }

    /**
     * Returns a game object for the provided game id that the ecosystem has approved.
     * Get ecosystem game
     */
    async getEcosystemGame(requestParameters: GetEcosystemGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicGame> {
        const response = await this.getEcosystemGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of games the ecosystem has approved.
     * Get ecosystem games
     */
    async getEcosystemGamesRaw(requestParameters: GetEcosystemGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicGame>>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling getEcosystemGames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}/games`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicGameFromJSON));
    }

    /**
     * Returns an array of games the ecosystem has approved.
     * Get ecosystem games
     */
    async getEcosystemGames(requestParameters: GetEcosystemGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicGame>> {
        const response = await this.getEcosystemGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a game this profile has connected player accounts for.
     * Get profile game
     */
    async getProfileGameRaw(requestParameters: GetProfileGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProfileGames200ResponseInner>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileGame.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getProfileGame.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling getProfileGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/games/{gameId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProfileGames200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Returns a game this profile has connected player accounts for.
     * Get profile game
     */
    async getProfileGame(requestParameters: GetProfileGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProfileGames200ResponseInner> {
        const response = await this.getProfileGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of games the authorized profile has connected player accounts for.
     * Get profile games
     */
    async getProfileGamesRaw(requestParameters: GetProfileGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProfileGames200ResponseInner>>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileGames.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling getProfileGames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/games`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProfileGames200ResponseInnerFromJSON));
    }

    /**
     * Returns an array of games the authorized profile has connected player accounts for.
     * Get profile games
     */
    async getProfileGames(requestParameters: GetProfileGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProfileGames200ResponseInner>> {
        const response = await this.getProfileGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * Unapprove ecosystem game
     */
    async unapproveEcosystemGameRaw(requestParameters: UnapproveEcosystemGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling unapproveEcosystemGame.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling unapproveEcosystemGame.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling unapproveEcosystemGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}/games/{gameId}`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     * Unapprove ecosystem game
     */
    async unapproveEcosystemGame(requestParameters: UnapproveEcosystemGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unapproveEcosystemGameRaw(requestParameters, initOverrides);
    }

    /**
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * Update ecosystem
     */
    async updateEcosystemRaw(requestParameters: UpdateEcosystemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EcosystemModel>> {
        if (requestParameters.ecosystemId === null || requestParameters.ecosystemId === undefined) {
            throw new runtime.RequiredError('ecosystemId','Required parameter requestParameters.ecosystemId was null or undefined when calling updateEcosystem.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling updateEcosystem.');
        }

        if (requestParameters.updateEcosystemRequest === null || requestParameters.updateEcosystemRequest === undefined) {
            throw new runtime.RequiredError('updateEcosystemRequest','Required parameter requestParameters.updateEcosystemRequest was null or undefined when calling updateEcosystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/ecosystems/{ecosystemId}`.replace(`{${"ecosystemId"}}`, encodeURIComponent(String(requestParameters.ecosystemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEcosystemRequestToJSON(requestParameters.updateEcosystemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EcosystemModelFromJSON(jsonValue));
    }

    /**
     * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     * Update ecosystem
     */
    async updateEcosystem(requestParameters: UpdateEcosystemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EcosystemModel> {
        const response = await this.updateEcosystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * Update profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileModel>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling updateProfile.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling updateProfile.');
        }

        if (requestParameters.updateProfileRequest === null || requestParameters.updateProfileRequest === undefined) {
            throw new runtime.RequiredError('updateProfileRequest','Required parameter requestParameters.updateProfileRequest was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters.updateProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileModelFromJSON(jsonValue));
    }

    /**
     * Update various fields specific to a profile. Such as changing its password and resetting its access token.
     * Update profile
     */
    async updateProfile(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileModel> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update various fields specific to a player. Such as changing its permissions.
     * Update profile player
     */
    async updateProfilePlayerRaw(requestParameters: UpdateProfilePlayerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfilePlayer200Response>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling updateProfilePlayer.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling updateProfilePlayer.');
        }

        if (requestParameters.playerId === null || requestParameters.playerId === undefined) {
            throw new runtime.RequiredError('playerId','Required parameter requestParameters.playerId was null or undefined when calling updateProfilePlayer.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling updateProfilePlayer.');
        }

        if (requestParameters.xWalletDecryptKey === null || requestParameters.xWalletDecryptKey === undefined) {
            throw new runtime.RequiredError('xWalletDecryptKey','Required parameter requestParameters.xWalletDecryptKey was null or undefined when calling updateProfilePlayer.');
        }

        if (requestParameters.updateProfilePlayerRequest === null || requestParameters.updateProfilePlayerRequest === undefined) {
            throw new runtime.RequiredError('updateProfilePlayerRequest','Required parameter requestParameters.updateProfilePlayerRequest was null or undefined when calling updateProfilePlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        if (requestParameters.xWalletDecryptKey !== undefined && requestParameters.xWalletDecryptKey !== null) {
            headerParameters['X-Wallet-Decrypt-Key'] = String(requestParameters.xWalletDecryptKey);
        }

        const response = await this.request({
            path: `/v1/profiles/{profileId}/games/{gameId}/players/{playerId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))).replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters.playerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfilePlayerRequestToJSON(requestParameters.updateProfilePlayerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfilePlayer200ResponseFromJSON(jsonValue));
    }

    /**
     * Update various fields specific to a player. Such as changing its permissions.
     * Update profile player
     */
    async updateProfilePlayer(requestParameters: UpdateProfilePlayerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfilePlayer200Response> {
        const response = await this.updateProfilePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
