/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthGame200Response,
  CreateGameRequest,
  PublicGame,
  UpdateGame200Response,
  UpdateGameRequest,
} from '../models';
import {
    AuthGame200ResponseFromJSON,
    AuthGame200ResponseToJSON,
    CreateGameRequestFromJSON,
    CreateGameRequestToJSON,
    PublicGameFromJSON,
    PublicGameToJSON,
    UpdateGame200ResponseFromJSON,
    UpdateGame200ResponseToJSON,
    UpdateGameRequestFromJSON,
    UpdateGameRequestToJSON,
} from '../models';

export interface CreateGameOperationRequest {
    createGameRequest: CreateGameRequest;
}

export interface GetGameRequest {
    gameId: string;
}

export interface UpdateGameOperationRequest {
    gameId: string;
    xAuthorization: string;
    updateGameRequest: UpdateGameRequest;
}

/**
 * 
 */
export class GamesApi extends runtime.BaseAPI {

    /**
     * Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
     * Authenticate game
     */
    async authGameRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGame200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/games/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGame200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
     * Authenticate game
     */
    async authGame(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGame200Response> {
        const response = await this.authGameRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab\'s services, you must first create a game through this endpoint.  After creating your game through this endpoint, a verification email will be sent to the email address used. Before you can access any of MetaFab\'s features, you\'ll need to click the link contained in the verification email to verify your account.
     * Create game
     */
    async createGameRaw(requestParameters: CreateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGame200Response>> {
        if (requestParameters.createGameRequest === null || requestParameters.createGameRequest === undefined) {
            throw new runtime.RequiredError('createGameRequest','Required parameter requestParameters.createGameRequest was null or undefined when calling createGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGameRequestToJSON(requestParameters.createGameRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGame200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab\'s services, you must first create a game through this endpoint.  After creating your game through this endpoint, a verification email will be sent to the email address used. Before you can access any of MetaFab\'s features, you\'ll need to click the link contained in the verification email to verify your account.
     * Create game
     */
    async createGame(requestParameters: CreateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGame200Response> {
        const response = await this.createGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a game object for the provided game id.
     * Get game
     */
    async getGameRaw(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicGame>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/games/{gameId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicGameFromJSON(jsonValue));
    }

    /**
     * Returns a game object for the provided game id.
     * Get game
     */
    async getGame(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicGame> {
        const response = await this.getGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
     * Update game
     */
    async updateGameRaw(requestParameters: UpdateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateGame200Response>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling updateGame.');
        }

        if (requestParameters.xAuthorization === null || requestParameters.xAuthorization === undefined) {
            throw new runtime.RequiredError('xAuthorization','Required parameter requestParameters.xAuthorization was null or undefined when calling updateGame.');
        }

        if (requestParameters.updateGameRequest === null || requestParameters.updateGameRequest === undefined) {
            throw new runtime.RequiredError('updateGameRequest','Required parameter requestParameters.updateGameRequest was null or undefined when calling updateGame.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAuthorization !== undefined && requestParameters.xAuthorization !== null) {
            headerParameters['X-Authorization'] = String(requestParameters.xAuthorization);
        }

        const response = await this.request({
            path: `/v1/games/{gameId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGameRequestToJSON(requestParameters.updateGameRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateGame200ResponseFromJSON(jsonValue));
    }

    /**
     * Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
     * Update game
     */
    async updateGame(requestParameters: UpdateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateGame200Response> {
        const response = await this.updateGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
