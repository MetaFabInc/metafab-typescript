/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RemovePlayerConnectedWalletRequest
 */
export interface RemovePlayerConnectedWalletRequest {
    /**
     * The address of the external wallet to remove from a player.
     * @type {string}
     * @memberof RemovePlayerConnectedWalletRequest
     */
    address: string;
    /**
     * Any positive integer that hasn't been used previously to connect or disconnect this external wallet. Must be the same nonce used to generate the `signature`.
     * @type {number}
     * @memberof RemovePlayerConnectedWalletRequest
     */
    nonce: number;
    /**
     * A signature string generated by signing a keccak256 hash generated with abiCoder encode arguments of `[ 'bytes32', 'address', 'bool', 'address', 'uint256' ]` and `[ keccak256(gameId), delegate wallet unapproved (player's custodial wallet address), false, external wallet address, any unused nonce number ]`.
     * @type {string}
     * @memberof RemovePlayerConnectedWalletRequest
     */
    signature: string;
    /**
     * The blockchain you want to remove this wallet connection on. If you need to remove it on multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time.
     * @type {string}
     * @memberof RemovePlayerConnectedWalletRequest
     */
    chain: RemovePlayerConnectedWalletRequestChainEnum;
}


/**
 * @export
 */
export const RemovePlayerConnectedWalletRequestChainEnum = {
    Arbitrum: 'ARBITRUM',
    Arbitrumgoerli: 'ARBITRUMGOERLI',
    Arbitrumnova: 'ARBITRUMNOVA',
    Avalanche: 'AVALANCHE',
    Avalanchefuji: 'AVALANCHEFUJI',
    Ethereum: 'ETHEREUM',
    Fantom: 'FANTOM',
    Fantomtest: 'FANTOMTEST',
    Goerli: 'GOERLI',
    Matic: 'MATIC',
    Maticmumbai: 'MATICMUMBAI',
    Thundercore: 'THUNDERCORE',
    Thundercoretestnet: 'THUNDERCORETESTNET'
} as const;
export type RemovePlayerConnectedWalletRequestChainEnum = typeof RemovePlayerConnectedWalletRequestChainEnum[keyof typeof RemovePlayerConnectedWalletRequestChainEnum];


/**
 * Check if a given object implements the RemovePlayerConnectedWalletRequest interface.
 */
export function instanceOfRemovePlayerConnectedWalletRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "chain" in value;

    return isInstance;
}

export function RemovePlayerConnectedWalletRequestFromJSON(json: any): RemovePlayerConnectedWalletRequest {
    return RemovePlayerConnectedWalletRequestFromJSONTyped(json, false);
}

export function RemovePlayerConnectedWalletRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RemovePlayerConnectedWalletRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'nonce': json['nonce'],
        'signature': json['signature'],
        'chain': json['chain'],
    };
}

export function RemovePlayerConnectedWalletRequestToJSON(value?: RemovePlayerConnectedWalletRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'nonce': value.nonce,
        'signature': value.signature,
        'chain': value.chain,
    };
}

