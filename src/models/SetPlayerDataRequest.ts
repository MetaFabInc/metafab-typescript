/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.3
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SetPlayerDataRequest
 */
export interface SetPlayerDataRequest {
    /**
     * protectedData can only be set if `X-Authorization` includes credentials for the game the target player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.
     * 
     * protectedData is great for storing sensitive player data like tracking experience points, off-chain inventories, save states, and more - things that players shouldn't have the ability to directly change themselves.
     * @type {object}
     * @memberof SetPlayerDataRequest
     */
    protectedData?: object;
    /**
     * publicData can be set if `X-Authorization` includes credentials for the target player or game the player is a part of. Expects an arbitrary object allowed to contain any set of properties and nested data within those properties, including arrays.
     * 
     * publicData is great for storing player preferences like in-game settings, non-sensitive data and more. Anything that a player should have the ability to directly change themselves without client or server verification can be stored in publicData.
     * @type {object}
     * @memberof SetPlayerDataRequest
     */
    publicData?: object;
}

/**
 * Check if a given object implements the SetPlayerDataRequest interface.
 */
export function instanceOfSetPlayerDataRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SetPlayerDataRequestFromJSON(json: any): SetPlayerDataRequest {
    return SetPlayerDataRequestFromJSONTyped(json, false);
}

export function SetPlayerDataRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetPlayerDataRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'protectedData': !exists(json, 'protectedData') ? undefined : json['protectedData'],
        'publicData': !exists(json, 'publicData') ? undefined : json['publicData'],
    };
}

export function SetPlayerDataRequestToJSON(value?: SetPlayerDataRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'protectedData': value.protectedData,
        'publicData': value.publicData,
    };
}

