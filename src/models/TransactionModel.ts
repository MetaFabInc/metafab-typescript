/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionModel
 */
export interface TransactionModel {
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    id?: string;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    contractId?: string;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    walletId?: string;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    _function?: string;
    /**
     * This field has not had a description added.
     * @type {object}
     * @memberof TransactionModel
     */
    args?: object;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    hash?: string;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    updatedAt?: string;
    /**
     * This field has not had a description added.
     * @type {string}
     * @memberof TransactionModel
     */
    createdAt?: string;
}

/**
 * Check if a given object implements the TransactionModel interface.
 */
export function instanceOfTransactionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionModelFromJSON(json: any): TransactionModel {
    return TransactionModelFromJSONTyped(json, false);
}

export function TransactionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'contractId': !exists(json, 'contractId') ? undefined : json['contractId'],
        'walletId': !exists(json, 'walletId') ? undefined : json['walletId'],
        '_function': !exists(json, 'function') ? undefined : json['function'],
        'args': !exists(json, 'args') ? undefined : json['args'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
    };
}

export function TransactionModelToJSON(value?: TransactionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'contractId': value.contractId,
        'walletId': value.walletId,
        'function': value._function,
        'args': value.args,
        'hash': value.hash,
        'updatedAt': value.updatedAt,
        'createdAt': value.createdAt,
    };
}

