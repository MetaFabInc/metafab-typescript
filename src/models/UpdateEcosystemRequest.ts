/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateEcosystemRequest
 */
export interface UpdateEcosystemRequest {
    /**
     * A new name. Replaces the ecosystem's current name.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    name?: string;
    /**
     * A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    email?: string;
    /**
     * The ecosystem's current password. Must be provided if setting `newPassword` or `email`.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    currentPassword?: string;
    /**
     * A new password. The ecosystem's old password will no longer be valid.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    newPassword?: string;
    /**
     * A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    iconImageBase64?: string;
    /**
     * A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    coverImageBase64?: string;
    /**
     * A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem.
     * @type {string}
     * @memberof UpdateEcosystemRequest
     */
    primaryColorHex?: string;
    /**
     * Revokes the ecosystem's previous published key and returns a new one if true.
     * @type {boolean}
     * @memberof UpdateEcosystemRequest
     */
    resetPublishedKey?: boolean;
    /**
     * Revokes the ecosystem's previous secret key and returns a new on if true.
     * @type {boolean}
     * @memberof UpdateEcosystemRequest
     */
    resetSecretKey?: boolean;
}

/**
 * Check if a given object implements the UpdateEcosystemRequest interface.
 */
export function instanceOfUpdateEcosystemRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateEcosystemRequestFromJSON(json: any): UpdateEcosystemRequest {
    return UpdateEcosystemRequestFromJSONTyped(json, false);
}

export function UpdateEcosystemRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateEcosystemRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'currentPassword': !exists(json, 'currentPassword') ? undefined : json['currentPassword'],
        'newPassword': !exists(json, 'newPassword') ? undefined : json['newPassword'],
        'iconImageBase64': !exists(json, 'iconImageBase64') ? undefined : json['iconImageBase64'],
        'coverImageBase64': !exists(json, 'coverImageBase64') ? undefined : json['coverImageBase64'],
        'primaryColorHex': !exists(json, 'primaryColorHex') ? undefined : json['primaryColorHex'],
        'resetPublishedKey': !exists(json, 'resetPublishedKey') ? undefined : json['resetPublishedKey'],
        'resetSecretKey': !exists(json, 'resetSecretKey') ? undefined : json['resetSecretKey'],
    };
}

export function UpdateEcosystemRequestToJSON(value?: UpdateEcosystemRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'email': value.email,
        'currentPassword': value.currentPassword,
        'newPassword': value.newPassword,
        'iconImageBase64': value.iconImageBase64,
        'coverImageBase64': value.coverImageBase64,
        'primaryColorHex': value.primaryColorHex,
        'resetPublishedKey': value.resetPublishedKey,
        'resetSecretKey': value.resetSecretKey,
    };
}

