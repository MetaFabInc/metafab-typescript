/* tslint:disable */
/* eslint-disable */
/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.43
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WithdrawFromExchangeRequest
 */
export interface WithdrawFromExchangeRequest {
    /**
     * A valid EVM based address to withdraw to. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    address?: string;
    /**
     * Any wallet id within the MetaFab ecosystem to withdraw to.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    walletId?: string;
    /**
     * The address of the currency (ERC20) token to withdraw from the exchange. If no currencyAddress or currencyId, and no collectionAddress or collectionId are provided, the native token held by the exchange will be withdrawn.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    currencyAddress?: string;
    /**
     * A valid MetaFab currency id that represents the currency token to withdraw from the exchange. `currencyAddress` or `currencyId` can be provided when withdrawing currency.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    currencyId?: string;
    /**
     * The address of the collection (ERC1155) for the items to withdraw from the exchange. If no currencyAddress and no collectionAddress is provided, the native token held by the exchange will be withdrawn.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    collectionAddress?: string;
    /**
     * A valid MetaFab collection id that represents the collection for the items to withdraw from the exchange. `collectionAddress` or `collectionId` can be provided when withdrawing items.
     * @type {string}
     * @memberof WithdrawFromExchangeRequest
     */
    collectionId?: string;
    /**
     * The specific itemIds of the provided collection to withdraw from the exchange.
     * @type {Array<number>}
     * @memberof WithdrawFromExchangeRequest
     */
    itemIds?: Array<number>;
}

/**
 * Check if a given object implements the WithdrawFromExchangeRequest interface.
 */
export function instanceOfWithdrawFromExchangeRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WithdrawFromExchangeRequestFromJSON(json: any): WithdrawFromExchangeRequest {
    return WithdrawFromExchangeRequestFromJSONTyped(json, false);
}

export function WithdrawFromExchangeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): WithdrawFromExchangeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : json['address'],
        'walletId': !exists(json, 'walletId') ? undefined : json['walletId'],
        'currencyAddress': !exists(json, 'currencyAddress') ? undefined : json['currencyAddress'],
        'currencyId': !exists(json, 'currencyId') ? undefined : json['currencyId'],
        'collectionAddress': !exists(json, 'collectionAddress') ? undefined : json['collectionAddress'],
        'collectionId': !exists(json, 'collectionId') ? undefined : json['collectionId'],
        'itemIds': !exists(json, 'itemIds') ? undefined : json['itemIds'],
    };
}

export function WithdrawFromExchangeRequestToJSON(value?: WithdrawFromExchangeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'walletId': value.walletId,
        'currencyAddress': value.currencyAddress,
        'currencyId': value.currencyId,
        'collectionAddress': value.collectionAddress,
        'collectionId': value.collectionId,
        'itemIds': value.itemIds,
    };
}

